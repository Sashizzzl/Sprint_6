{"name": "Проверка успешного заказа самоката с последующим переходом на главную страницу и страницу ЯндексДзен", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchElementException: Message: Unable to locate element: //*[@class='select-search__select']//*[text()='Войковская']; For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nStacktrace:\nRemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nWebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:193:5\nNoSuchElementError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:511:5\ndom.find/</<@chrome://remote/content/shared/DOM.sys.mjs:136:16", "trace": "self = <test_placing_order.TestPlacingOrder object at 0x0000020670372AB0>, name = 'Тейлор', surname = 'Свифт', adress = '5 Авеню', phone = '12345678980', metro = 'Войковская'\ntime = '01.11.2024'\n\n    @allure.title('Проверка успешного заказа самоката с последующим переходом на главную страницу и страницу ЯндексДзен')\n    @pytest.mark.parametrize(\"name,surname,adress,phone,metro,time\",[(\"Александра\",\"Русакова\",\"Ленина 7\",\"12345678989\",\"Сокольники\",\"01.10.2024\"),\n                                                                     (\"Тейлор\",\"Свифт\",\"5 Авеню\",\"12345678980\",\"Войковская\",\"01.11.2024\")])\n    def test_placing_order(self,name,surname,adress,phone,metro,time):\n        order = MainPage(self.driver)\n        order.open_page()\n        #проверяем кнопку заказа вверху страницы\n        order.click_order_button_in_header()\n    \n        rent = OrderPage(self.driver)\n        rent.fill_in_all_fields_on_order_page_except_metro(name, surname, adress, phone)\n        metro_fill_in = MetroLocators(self.driver)\n        metro_fill_in.fill_in_metro_station(metro)\n>       metro_fill_in.choose_metro_station(metro)\n\ntests\\test_placing_order.py:32: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\order_page.py:61: in choose_metro_station\n    self.driver.find_element(*MetroLocators.get_metro_station_locator(metro)).click()\n..\\Sprint_5\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:748: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n..\\Sprint_5\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000020672974DA0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"Unable to locate element: //*[@class=\\'select.../content/shared/webdriver/Errors.sys.mjs:511:5\\\\ndom.find/</<@chrome://remote/content/shared/DOM.sys.mjs:136:16\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: Unable to locate element: //*[@class='select-search__select']//*[text()='Войковская']; For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nE       Stacktrace:\nE       RemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nE       WebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:193:5\nE       NoSuchElementError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:511:5\nE       dom.find/</<@chrome://remote/content/shared/DOM.sys.mjs:136:16\n\n..\\Sprint_5\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: NoSuchElementException"}, "steps": [{"name": "Открываем страницу ЯндексСамокат", "status": "passed", "start": 1726273014078, "stop": 1726273014294}, {"name": "Кликаем на кнопку заказа в верхней части страницы", "status": "passed", "start": 1726273014294, "stop": 1726273014526}, {"name": "Заполняем все поля о пользователе", "status": "passed", "steps": [{"name": "Открываем страницу ЯндексСамокат", "status": "passed", "parameters": [{"name": "name", "value": "'Тейлор'"}], "start": 1726273014526, "stop": 1726273014548}, {"name": "Заполняем поле с именем пользователя", "status": "passed", "parameters": [{"name": "surname", "value": "'Свифт'"}], "start": 1726273014548, "stop": 1726273014564}, {"name": "Заполняем поле с фамилией пользователя", "status": "passed", "parameters": [{"name": "adress", "value": "'5 Авеню'"}], "start": 1726273014564, "stop": 1726273014626}, {"name": "Заполняем поле с телефоном пользователя", "status": "passed", "parameters": [{"name": "phone", "value": "'12345678980'"}], "start": 1726273014626, "stop": 1726273014679}], "parameters": [{"name": "name", "value": "'Тейлор'"}, {"name": "surname", "value": "'Свифт'"}, {"name": "adress", "value": "'5 Авеню'"}, {"name": "phone", "value": "'12345678980'"}], "start": 1726273014526, "stop": 1726273014679}, {"name": "Заполняем поле со станцией метро", "status": "passed", "parameters": [{"name": "metro", "value": "'Войковская'"}], "start": 1726273014679, "stop": 1726273014811}, {"name": "Выбираем станцию метро", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchElementException: Message: Unable to locate element: //*[@class='select-search__select']//*[text()='Войковская']; For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nStacktrace:\nRemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nWebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:193:5\nNoSuchElementError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:511:5\ndom.find/</<@chrome://remote/content/shared/DOM.sys.mjs:136:16\n\n", "trace": "  File \"C:\\Users\\artmo\\PycharmProjects\\Sprint_5\\.venv\\Lib\\site-packages\\allure_commons\\_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"C:\\Users\\artmo\\PycharmProjects\\Sprint_6\\pages\\order_page.py\", line 61, in choose_metro_station\n    self.driver.find_element(*MetroLocators.get_metro_station_locator(metro)).click()\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\artmo\\PycharmProjects\\Sprint_5\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 748, in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\artmo\\PycharmProjects\\Sprint_5\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 354, in execute\n    self.error_handler.check_response(response)\n  File \"C:\\Users\\artmo\\PycharmProjects\\Sprint_5\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "parameters": [{"name": "metro", "value": "'Войковская'"}], "start": 1726273014811, "stop": 1726273014826}], "parameters": [{"name": "name", "value": "'Тейлор'"}, {"name": "surname", "value": "'Свифт'"}, {"name": "adress", "value": "'5 Авеню'"}, {"name": "phone", "value": "'12345678980'"}, {"name": "metro", "value": "'Войковская'"}, {"name": "time", "value": "'01.11.2024'"}], "start": 1726273014078, "stop": 1726273014826, "uuid": "1595c35f-8d6a-438a-b746-bcefb5af4853", "historyId": "9cc9134f4971fef788871201b051d663", "testCaseId": "a4992f1b00c55fd9572e45f28cb7fffa", "fullName": "tests.test_placing_order.TestPlacingOrder#test_placing_order", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_placing_order"}, {"name": "subSuite", "value": "TestPlacingOrder"}, {"name": "host", "value": "DESKTOP-ABCQNV2"}, {"name": "thread", "value": "5448-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_placing_order"}]}